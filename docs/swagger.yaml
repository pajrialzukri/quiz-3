basePath: /api
definitions:
  helpers.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  structs.Book:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      price:
        type: integer
      release_year:
        type: integer
      thickness:
        type: string
      title:
        type: string
      total_page:
        type: integer
    type: object
  structs.Category:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  structs.UserPayload:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/contact
  description: This is the API documentation for the Category service and Books API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Category API Documentation
  version: "1.0"
paths:
  /api/books:
    get:
      consumes:
      - application/json
      description: Fetch all books from the database
      produces:
      - application/json
      responses:
        "200":
          description: Fetched books successfully
          schema:
            allOf:
            - $ref: '#/definitions/helpers.Response'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/structs.Book'
                  type: array
              type: object
        "500":
          description: Failed to fetch books
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book in the database
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/structs.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/helpers.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/helpers.Response'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/helpers.Response'
        "500":
          description: Failed to create book
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Create a new book
      tags:
      - books
  /api/books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book from the database by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted successfully
          schema:
            $ref: '#/definitions/helpers.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Delete a book by ID
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Fetch a book by its ID from the database
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetched book successfully
          schema:
            allOf:
            - $ref: '#/definitions/helpers.Response'
            - properties:
                Data:
                  $ref: '#/definitions/structs.Book'
              type: object
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Get a book by ID
      tags:
      - books
  /api/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Add a new category to the database
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/structs.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helpers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Create a new category
      tags:
      - Categories
  /api/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Delete a category by ID
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Retrieve a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Get category by ID
      tags:
      - Categories
  /api/categories/{id}/books:
    get:
      consumes:
      - application/json
      description: Retrieve books that belong to a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Get books by category ID
      tags:
      - Categories
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and generates a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/structs.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/helpers.Response'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/helpers.Response'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/helpers.Response'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: User login
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and stores the user data in the database
      parameters:
      - description: User registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/structs.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/helpers.Response'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/helpers.Response'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/helpers.Response'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/helpers.Response'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
